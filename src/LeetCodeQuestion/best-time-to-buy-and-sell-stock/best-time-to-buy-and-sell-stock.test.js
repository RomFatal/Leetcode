import {maxProfit} from "./best-time-to-buy-and-sell-stock"

// Generated by CodiumAI

/*
Code Analysis:
-The main goal of the function is to calculate the maximum profit that can be obtained by buying and selling a stock at different prices.
- The function takes an array of stock prices as input.
- It initializes two variables, 'buy' and 'max_profit', to the first element of the input array and 0, respectively.
- It then iterates through the input array, starting from the second element.
- For each element, it checks if the current price is lower than the 'buy' price. If it is, it updates the 'buy' variable to the current price.
- If the current price is higher than the 'buy' price, it calculates the profit that can be obtained by selling at the current price and updates the 'max_profit' variable if the calculated profit is higher than the current 'max_profit'.
- Finally, it returns the maximum profit that can be obtained.
- The time complexity of the function is O(N), where N is the length of the input array, and the space complexity is O(1), as the function only uses a constant amount of extra space.
*/



describe('maxProfit_function', () => {

    // Tests that the function returns the correct maximum profit for an input array with increasing prices. tags: [happy path]
    test("test_increasing_prices", () => {
        const prices = [1, 2, 3, 4, 5];
        expect(maxProfit(prices)).toBe(4);
    });

    // Tests that the function returns the correct maximum profit for an input array with decreasing prices. tags: [happy path]
    test("test_decreasing_prices", () => {
        const prices = [5, 4, 3, 2, 1];
        expect(maxProfit(prices)).toBe(0);
    });

    // Tests that the function returns 0 for an input array with constant prices. tags: [happy path]
    test("test_constant_prices", () => {
        const prices = [1, 1, 1, 1, 1];
        expect(maxProfit(prices)).toBe(0);
    });

    // Tests that the function returns 0 for an input array with only one element. tags: [edge case]
    test("test_one_element", () => {
        const prices = [1];
        expect(maxProfit(prices)).toBe(0);
    });

    // Tests that the function returns 0 for an input array with all elements being the same. tags: [edge case]
    test("test_all_same", () => {
        const prices = [2, 2, 2, 2, 2];
        expect(maxProfit(prices)).toBe(0);
    });

    // Tests that the function handles input arrays with negative prices. tags: [edge case]
    test("test_negative_prices", () => {
        const prices = [-1, -2, -3, -4, -5];
        expect(maxProfit(prices)).toBe(0);
    });

    test("test_negative_prices", () => {
        const prices = [-5, -4, -3, -2, -1];
        expect(maxProfit(prices)).toBe(4);
    });
});
